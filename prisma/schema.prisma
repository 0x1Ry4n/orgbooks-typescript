// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionFlags {
  ADMIN_CREATE @map("admin:create")
  ADMIN_EDIT   @map("admin:edit")
  ADMIN_DELETE @map("admin:delete")
  ADMIN_LIST   @map("admin:list")

  CUSTOMER_CREATE @map("customer:create")
  CUSTOMER_EDIT   @map("customer:edit")
  CUSTOMER_DELETE @map("customer:delete")
  CUSTOMER_LIST   @map("customer:list")

  BOOKSTORE_CREATE @map("bookstore:create")
  BOOKSTORE_EDIT   @map("bookstore:edit")
  BOOKSTORE_DELETE @map("bookstore:delete")
  BOOKSTORE_LIST   @map("bookstore:list")

  BOOK_CREATE @map("book:create")
  BOOK_EDIT   @map("book:edit")
  BOOK_DELETE @map("book:delete")
  BOOK_LIST   @map("book:list")

  BOOKLOAN_CREATE @map("bookloan:create")
  BOOKLOAN_EDIT   @map("bookloan:edit")
  BOOKLOAN_DELETE @map("bookloan:delete")
  BOOKLOAN_LIST   @map("bookloan:list")

  REVIEW_CREATE @map("review:create")
  REVIEW_EDIT   @map("review:edit")
  REVIEW_DELETE @map("review:delete")
  REVIEW_LIST   @map("review:list")

  COMMENT_CREATE @map("comment:create")
  COMMENT_EDIT   @map("comment:edit")
  COMMENT_DELETE @map("comment:delete")
  COMMENT_LIST   @map("comment:list")
}

enum UserType {
  ADMIN
  CUSTOMER
}

model AuthData {
  id String @id @default(uuid())

  email                     String    @unique
  passwordHash              String
  salt                      String
  passwordRecoverCode       String?
  passwordRecoverExpiration DateTime?

  userType    UserType
  permissions PermissionFlags[]

  admin    Admin?
  customer Customer?
}

model Admin {
  id         String   @id @default(uuid())
  authData   AuthData @relation(fields: [authDataId], references: [id])
  authDataId String   @unique

  username      String    @db.VarChar(20)
  phoneNumber   String    @db.VarChar(15)
  birthDate     DateTime? @db.Date
  imageLocation String?

  Bookstore   Bookstore? @relation(fields: [bookstoreId], references: [id])
  bookstoreId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id         String   @id @default(uuid())
  authData   AuthData @relation(fields: [authDataId], references: [id])
  authDataId String   @unique

  username      String    @db.VarChar(20)
  phoneNumber   String    @db.VarChar(15)
  birthDate     DateTime? @db.Date
  imageLocation String?

  BookLoans BookLoan[]
  Review    Review[]
  Comment   Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Bookstore {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(100)
  email       String  @unique
  phoneNumber String  @db.VarChar(15)
  city        String
  cep         String? @db.VarChar(100)

  admins    Admin[]
  books     Book[]
  bookLoans BookLoan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookstores")
}

model BookLoan {
  id String @id @default(uuid())

  Bookstore   Bookstore? @relation(fields: [bookstoreId], references: [id])
  bookstoreId String?

  Book   Book?   @relation(fields: [bookId], references: [id])
  bookId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  returnDate DateTime
  status     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookloans")
}

model Book {
  id              String    @id @default(uuid())
  title           String    @db.VarChar(200)
  publicationDate DateTime?
  author          String?   @db.VarChar(255)
  genre           String?   @db.VarChar(50)
  qrCodeId        String?   @db.VarChar(50)
  price           Float?
  isAvailable     Boolean   @default(true)

  Bookstore   Bookstore? @relation(fields: [bookstoreId], references: [id])
  bookstoreId String?

  BookLoans BookLoan[]
  Reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("books")
}

model Review {
  id String @id @default(uuid())

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  Book   Book?   @relation(fields: [bookId], references: [id])
  bookId String?

  title         String @db.VarChar(200)
  body          String @db.VarChar(2000)
  imageLocation String

  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Comment {
  id Int @id @default(autoincrement())

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  Reviews  Review? @relation(fields: [reviewId], references: [id])
  reviewId String?

  body String @db.VarChar(300)

  createdAt DateTime @default(now())

  @@map("comments")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
